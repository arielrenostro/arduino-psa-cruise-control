#include <Arduino.h>
// #include <Wire.h>
#include <AltSoftSerial.h>

// #include "components/Display.h"
// #include "controllers/DACRelayController.h"
#include "./pids.h"

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET -1    // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define SCREEN_ADDR 0x3C // OLED display addr

// Throttle pedal
#define THROTTLE_PEDAL_DAC_1 0x61
#define THROTTLE_PEDAL_INPUT_1 A0
#define THROTTLE_PEDAL_OUTPUT_1 A3

#define THROTTLE_PEDAL_DAC_2 0x60
#define THROTTLE_PEDAL_INPUT_2 A1
#define THROTTLE_PEDAL_OUTPUT_2 A2

#define THROTTLE_PEDAL_T1_MIN 87  // analogic 0-1023
#define THROTTLE_PEDAL_T1_MAX 810 // analogic 0-1023
#define THROTTLE_PEDAL_T2_MIN 43  // analogic 0-1023
#define THROTTLE_PEDAL_T2_MAX 405 // analogic 0-1023

// KWP

// Components
// Display display(SCREEN_ADDR, SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Controllers
// DACRelayController dacRelayController1(THROTTLE_PEDAL_DAC_1, THROTTLE_PEDAL_INPUT_1, THROTTLE_PEDAL_OUTPUT_1);
// DACRelayController dacRelayController2(THROTTLE_PEDAL_DAC_2, THROTTLE_PEDAL_INPUT_2, THROTTLE_PEDAL_OUTPUT_2);

// functions

// KLINE CONFUSION

AltSoftSerial Alt_Serial;


#define READ_DELAY 5
int REQUEST_DELAY;

#define K_Serial Alt_Serial
#define K_line_RX 8
#define K_line_TX 9

byte resultBuffer[70];
//String dtcBuffer[50];
String supportedLiveData[32];
String supportedFreezeFrame[32];
String supportedVehicleInfo[32];

//

// String protocol = "Automatic";
// String protocol = "ISO9141";
// String protocol = "ISO14230_Slow";
const String protocol = "ISO14230_Fast";

int SPEED = 0, RPM = 0, THROTTLE = 0, COOLANT_TEMP = 0, INTAKE_TEMP = 0, TIMINGADVANCE = 0, ENGINELOAD = 0, MAF = 0, DISTANCE_TRAVELED_WITH_MIL = 0;
int freeze_SPEED = 0, freeze_RPM = 0, freeze_COOLANT_TEMP = 0, freeze_ENGINELOAD = 0;
double VOLTAGE = 0;
String Vehicle_VIN = "", Vehicle_ID = "", Vehicle_ID_Num = "";

bool KLineStatus = false;


bool init_OBD2();
void read_K();
void getSupportedPIDs(const byte option);
void writeData(const byte data[], int length, const byte pid);
void writeDataFreezeFrame(const byte data[], int length, const byte pid);
void readData();
void getPID(const byte pid);
void getFreezeFrame(const byte pid);
// void get_DTCs();
// String decodeDTC(char input_byte1, char input_byte2);
// void clear_DTC();
void getVIN();
void getCalibrationID();
void getCalibrationIDNum();


String convertBytesToHexString(byte* buffer, int length);
String convertHexToAscii(byte* hexBytes, size_t length);
bool isInArray(String array[], int arrayLength, String searchString);
byte calculateChecksum(const byte data[], int length);


void setup()
{
  Serial.begin(115200);
  // if (display.setup())
  // {
  //   display.setCursor(0, 16);
  //   display.setTextSize(3);
  //   display.setTextColor(WHITE);
  //   display.println(F("80km"));
  //   display.display();
  // }
  //  if (dacRelayController1.setup())
  //  {
  //    dacRelayController1.setVoltage(0, true);
  //  }
  //  if (dacRelayController2.setup())
  //  {
  //    dacRelayController2.setVoltage(0, true);
  //  }
   
    Serial.println("Initialising K-line...");
    pinMode(K_line_RX, INPUT_PULLUP);

    Serial.println("output");
    pinMode(K_line_TX, OUTPUT);

    //https://github.com/muki01/OBD2_K-line_Reader/blob/main/Basic_Code/Basic_Code.ino

    K_Serial.begin(10400);

    Serial.println("Setup finished");

    Serial.println(protocol);
}

unsigned long x = 0;
uint8_t v = 40;

int i1;
int i2;
int o1;
int o2;

double vi1;
double vi2;
double vo1;
double vo2;

int aa1;
bool xx1;

void loop()
{
  i1 = analogRead(THROTTLE_PEDAL_INPUT_1);
  i2 = analogRead(THROTTLE_PEDAL_INPUT_2);
  o1 = analogRead(THROTTLE_PEDAL_OUTPUT_1);
  o2 = analogRead(THROTTLE_PEDAL_OUTPUT_2);

  vi1 = (5.0 / 1024.0) * i1;
  vi2 = (5.0 / 1024.0) * i2;
  vo1 = (5.0 / 1024.0) * o1;
  vo2 = (5.0 / 1024.0) * o2;

  // dacRelayController1.onLoop();
  // dacRelayController2.onLoop();

  // to check

  // if (xx1) {
  //   aa1 += 5;
  // } else {
  //   aa1 -= 5;
  // }

  // if (aa1 < 0) {
  //   aa1 = 0;
  //   xx1 = true;
  // } else if (aa1 > 4095) {
  //   aa1 = 4095;
  //   xx1 = false;
  // }

  // dacRelayController1.setVoltage(aa1, false);
  // dacRelayController2.setVoltage(aa1, false);
  // Serial.print(" ");
  // Serial.print(aa1);
  // Serial.print(" ");
  // Serial.print(xx1);

  Serial.print("\n");

  // display.clearDisplay();
  // display.setTextSize(2);
  // display.setTextColor(WHITE);
  // display.setCursor(0, 0);

  // display.print('1');
  // display.print(':');
  // display.print(' ');
  // display.print(' ');
  // display.print(' ');
  // display.print(' ');
  // display.print('2');
  // display.print(':');
  // display.print('\n');
  // display.print(vi1, 2);
  // display.print(' ');
  // display.print(' ');
  // display.print(vi2, 2);
  // display.print('\n');
  // display.print(vo1, 2);
  // display.print(' ');
  // display.print(' ');
  // display.print(vo2, 2);
  // display.print('\n');

  // i1 = dacRelayController1.getFix();
  // i2 = dacRelayController2.getFix();
  // if (abs(i1) < 100)
  // {
  //   display.print(' ');
  // }
  // if (abs(i1) < 10)
  // {
  //   display.print(' ');
  // }
  // if (i1 >= 0)
  // {
  //   display.print(' ');
  // }
  // display.print((long)i1, 10);

  // display.print(' ');
  // display.print(' ');

  // if (abs(i2) < 100)
  // {
  //   display.print(' ');
  // }
  // if (abs(i2) < 10)
  // {
  //   display.print(' ');
  // }
  // if (i2 >= 0)
  // {
  //   display.print(' ');
  // }
  // display.print((long)i2, 10);

  // display.display();

  // if (millis() - x > 100 || true)
  // {
  //   display.clearDisplay();
  //   display.setCursor(16, 22);
  //   display.setTextSize(3);
  //   display.setTextColor(WHITE);
  //   if (v < 100)
  //   {
  //     display.print(' ');
  //   }
  //   if (v < 10)
  //   {
  //     display.print(' ');
  //   }
  //   display.print(v, 10);
  //   display.setCursor(76, 22);
  //   display.println(F("km"));
  //   display.display();

  //   if (v >= 120)
  //   {
  //     v = 40;
  //   }
  //   v++;

  //   x = millis();
  // }

  
  if (KLineStatus == false) {
    Serial.println("Initialising...");
    bool init_success = init_OBD2();

    if (init_success) {
      KLineStatus = true;
      Serial.println("Init Success !!");
    }
  } else {
    read_K();
  }

  delay(1000);
}


void read_K()
{
    getSupportedPIDs(0x01);
    Serial.println("Suported LiveData: ");
    for (int i = 0; i < 32; i++)
    {
        Serial.print(supportedLiveData[i]);
        Serial.print(", ");
    }
    Serial.println();

    getSupportedPIDs(0x02);
    Serial.println("Suported FreezeFrame: ");
    for (int i = 0; i < 32; i++)
    {
        Serial.print(supportedFreezeFrame[i]);
        Serial.print(", ");
    }
    Serial.println();

    getSupportedPIDs(0x09);
    Serial.println("Suported VehicleInfo: ");
    for (int i = 0; i < 32; i++)
    {
        Serial.print(supportedVehicleInfo[i]);
        Serial.print(", ");
    }
    Serial.println();

    Serial.println("Live Data: ");
    getPID(VEHICLE_SPEED);
    Serial.print("Speed: "), Serial.println(SPEED);
    getPID(ENGINE_RPM);
    Serial.print("Engine RPM: "), Serial.println(RPM);
    getPID(ENGINE_COOLANT_TEMP);
    Serial.print("Coolant Temp: "), Serial.println(COOLANT_TEMP);
    getPID(INTAKE_AIR_TEMP);
    Serial.print("Intake Air Temp: "), Serial.println(INTAKE_TEMP);
    getPID(THROTTLE_POSITION);
    Serial.print("Throttle: "), Serial.println(THROTTLE);
    getPID(TIMING_ADVANCE);
    Serial.print("Timing Advance: "), Serial.println(TIMINGADVANCE);
    getPID(ENGINE_LOAD);
    Serial.print("Engine Load: "), Serial.println(ENGINELOAD);
    getPID(MAF_FLOW_RATE);
    Serial.print("MAF Flow Rate: "), Serial.println(MAF);

    // get_DTCs();
    // Serial.println("DTCs: ");
    // for (int i = 0; i < 32; i++)
    // {
    //     Serial.print(dtcBuffer[i]);
    //     Serial.print(", ");
    // }
    // Serial.println();

    Serial.println("Freeze Frame: ");
    getFreezeFrame(VEHICLE_SPEED);
    Serial.print("Speed: "), Serial.println(freeze_SPEED);
    getFreezeFrame(ENGINE_RPM);
    Serial.print("Engine RPM: "), Serial.println(freeze_RPM);
    getFreezeFrame(ENGINE_COOLANT_TEMP);
    Serial.print("Coolant Temp: "), Serial.println(freeze_COOLANT_TEMP);
    getFreezeFrame(ENGINE_LOAD);
    Serial.print("Engine Load: "), Serial.println(freeze_ENGINELOAD);

    K_Serial.flush();
}

bool init_OBD2()
{
  Serial.print("Init OBD2 ");
  Serial.print(protocol);
  Serial.print("\n");
    // Request: C1 33 F1 81 66
    // Response: 83 F1 11 C1 8F EF C4

    if (protocol == "Automatic" || protocol == "ISO14230_Fast" || true || true)
    {
      Serial.println("Trying ISO1430_Fast");
        REQUEST_DELAY = 50;
        K_Serial.end();
        digitalWrite(K_line_TX, HIGH), delay(3000);
        digitalWrite(K_line_TX, LOW), delay(25);
        digitalWrite(K_line_TX, HIGH), delay(25);

        K_Serial.begin(10400);
        writeData(start_Bytes, sizeof(start_Bytes), init_OBD);
        readData();
        if (resultBuffer[8] == 0xC1)
        {
            // protocol = "ISO14230_Fast";
            return true;
        }
    }

    if (protocol == "Automatic" || protocol == "ISO14230_Slow" || protocol == "ISO9141")
    {
      Serial.println("Trying ISO9141");
        REQUEST_DELAY = 500;
        K_Serial.end();
        digitalWrite(K_line_TX, HIGH), delay(3000);
        digitalWrite(K_line_TX, LOW), delay(200);
        digitalWrite(K_line_TX, HIGH), delay(400);
        digitalWrite(K_line_TX, LOW), delay(400);
        digitalWrite(K_line_TX, HIGH), delay(400);
        digitalWrite(K_line_TX, LOW), delay(400);
        digitalWrite(K_line_TX, HIGH), delay(200);

        K_Serial.begin(10400);
        readData();
        if (resultBuffer[0] == 0x55)
        {
            if (resultBuffer[1] == resultBuffer[2])
            {
                // protocol = "ISO9141";
                Serial.println("FAILURE ISO9141");
                return false;
            }
            else
            {
              Serial.println("FAILURE ISO14230_Slow");
                // protocol = "ISO14230_Slow";
                return false;
            }
            delay(30);
            K_Serial.write(~resultBuffer[2]); // 0xF7
            REQUEST_DELAY = 50;
            readData();
            REQUEST_DELAY = 500;

            if (resultBuffer[1])
            {
                return true;
            }
        }
    }

    return false;
}

void writeData(const byte data[], int length, const byte pid)
{
    Serial.println("Writing Data");
    byte extendedData[length + 2];
    memcpy(extendedData, data, length);
    extendedData[length] = pid;
    byte checksum = calculateChecksum(extendedData, length + 1);
    extendedData[length + 1] = checksum;

    for (int i = 0; i < length + 2; i++)
    {
        K_Serial.write(extendedData[i]);
        delay(READ_DELAY);
    }
}

void writeDataFreezeFrame(const byte data[], int length, const byte pid)
{
    byte extendedData[length + 3];
    memcpy(extendedData, data, length);
    extendedData[length] = pid;
    extendedData[length + 1] = 0x00;
    byte checksum = calculateChecksum(extendedData, length + 2);
    extendedData[length + 2] = checksum;

    for (int i = 0; i < length + 3; i++)
    {
        K_Serial.write(extendedData[i]);
        delay(READ_DELAY);
    }
}

void readData()
{
    delay(REQUEST_DELAY);
    int result = K_Serial.available();
    if (result > 0)
    {
        memset(resultBuffer, 0, sizeof(resultBuffer));
        Serial.print("Received Data: ");
        int bytesRead = min(result, int(sizeof(resultBuffer)));
        for (int i = 0; i < bytesRead; i++)
        {
            resultBuffer[i] = K_Serial.read();
            Serial.print(resultBuffer[i], HEX);
            Serial.print(" ");
            delay(READ_DELAY);
        }
        Serial.println();
    }
}

void getPID(const byte pid)
{
    // example Request: C2 33 F1 01 0C F3
    // example Response: 84 F1 11 41 0C 1F 40 32
    if (protocol == "ISO9141")
    {
        writeData(live_data_SLOW, sizeof(live_data_SLOW), pid);
    }
    else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow" || true)
    {
        writeData(live_data, sizeof(live_data), pid);
    }
    readData();

    if (resultBuffer[10] == pid)
    {
        if (pid == VEHICLE_SPEED)
            SPEED = resultBuffer[11];
        if (pid == ENGINE_RPM)
            RPM = (resultBuffer[11] * 256 + resultBuffer[12]) / 4;
        if (pid == ENGINE_COOLANT_TEMP)
            COOLANT_TEMP = resultBuffer[11] - 40;
        if (pid == INTAKE_AIR_TEMP)
            INTAKE_TEMP = resultBuffer[11] - 40;
        if (pid == THROTTLE_POSITION)
            THROTTLE = resultBuffer[11] * 100 / 255;
        if (pid == TIMING_ADVANCE)
            TIMINGADVANCE = (resultBuffer[11] / 2) - 64;
        if (pid == ENGINE_LOAD)
            ENGINELOAD = resultBuffer[11] / 2.55;
        if (pid == MAF_FLOW_RATE)
            MAF = (256 * resultBuffer[11] + resultBuffer[12]) / 100;
        if (pid == DISTANCE_TRAVELED_WITH_MIL_ON)
            DISTANCE_TRAVELED_WITH_MIL = 256 * resultBuffer[11] + resultBuffer[12];
    }
}

void getFreezeFrame(const byte pid)
{
    // example Request: C3 33 F1 02 05 00 EE
    // example Response: 84 F1 11 42 05 00 8A 57
    if (protocol == "ISO9141")
    {
        writeDataFreezeFrame(freeze_frame_SLOW, sizeof(freeze_frame_SLOW), pid);
    }
    else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
    {
        writeDataFreezeFrame(freeze_frame, sizeof(freeze_frame), pid);
    }
    readData();

    if (resultBuffer[11] == pid)
    {
        if (pid == VEHICLE_SPEED)
            freeze_SPEED = resultBuffer[13];
        if (pid == ENGINE_RPM)
            freeze_RPM = (resultBuffer[13] * 256 + resultBuffer[14]) / 4;
        if (pid == ENGINE_COOLANT_TEMP)
            freeze_COOLANT_TEMP = resultBuffer[13] - 40;
        if (pid == ENGINE_LOAD)
            freeze_ENGINELOAD = resultBuffer[13] / 2.55;
    }
}

// void get_DTCs()
// {
//     // Request: C2 33 F1 03 F3
//     // example Response: 87 F1 11 43 01 70 01 34 00 00 72
//     int dtcs = 0;
//     char dtcBytes[2];

//     if (protocol == "ISO9141")
//     {
//         writeData(start_Bytes_SLOW, sizeof(start_Bytes_SLOW), read_DTCs);
//     }
//     else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
//     {
//         writeData(start_Bytes, sizeof(start_Bytes), read_DTCs);
//     }
//     readData();

//     int length = sizeof(resultBuffer) - 10;
//     for (int i = 0; i < length; i++)
//     {
//         dtcBytes[0] = resultBuffer[9 + i * 2];
//         dtcBytes[1] = resultBuffer[9 + i * 2 + 1];
//         delay(READ_DELAY);

//         if (dtcBytes[0] == 0 && dtcBytes[1] == 0)
//         {
//             break;
//         }
//         else
//         {
//             String ErrorCode = decodeDTC(dtcBytes[0], dtcBytes[1]);
//             dtcBuffer[dtcs++] = ErrorCode;
//         }
//     }
// }

// String decodeDTC(char input_byte1, char input_byte2)
// {
//     String ErrorCode = "";
//     const static char type_lookup[4] = {'P', 'C', 'B', 'U'};
//     const static char digit_lookup[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

//     ErrorCode += type_lookup[(input_byte1 >> 6) & 0b11];
//     ErrorCode += digit_lookup[(input_byte1 >> 4) & 0b11];
//     ErrorCode += digit_lookup[input_byte1 & 0b1111];
//     ErrorCode += digit_lookup[input_byte2 >> 4];
//     ErrorCode += digit_lookup[input_byte2 & 0b1111];

//     return ErrorCode;
// }

// void clear_DTC()
// {
//     if (protocol == "ISO9141")
//     {
//         writeData(start_Bytes_SLOW, sizeof(start_Bytes_SLOW), clear_DTCs);
//     }
//     else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
//     {
//         writeData(start_Bytes, sizeof(start_Bytes), clear_DTCs);
//     }
// }

void getVIN()
{
    // Request: C2 33 F1 09 02 F1
    // example Response: 87 F1 11 49 02 01 00 00 00 31 06
    //                   87 F1 11 49 02 02 41 31 4A 43 D5
    //                   87 F1 11 49 02 03 35 34 34 34 A8
    //                   87 F1 11 49 02 04 52 37 32 35 C8

    byte VIN_Array[17];
    int arrayNum = 0;

    if (protocol == "ISO9141")
    {
        writeData(vehicle_info_SLOW, sizeof(vehicle_info_SLOW), read_VIN);
    }
    else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
    {
        writeData(vehicle_info, sizeof(vehicle_info), read_VIN);
    }

    delay(200);
    readData();

    if (resultBuffer[11] == 0x01)
    {
        VIN_Array[arrayNum++] = resultBuffer[15];
        for (int j = 0; j < 4; j++)
        {
            for (int i = 1; i <= 4; i++)
            {
                VIN_Array[arrayNum++] = resultBuffer[i + 22 + j * 11];
            }
        }
    }

    Vehicle_VIN = convertHexToAscii(VIN_Array, sizeof(VIN_Array));
}

void getCalibrationID()
{
    // Request: C2 33 F1 09 04 F3
    // example Response: 87 F1 11 49 04 01 4F 32 43 44 DF
    //                   87 F1 11 49 04 02 31 30 31 41 AB
    //                   87 F1 11 49 04 03 00 00 00 00 D9
    //                   87 F1 11 49 04 04 00 00 00 00 DA

    byte ID_Array[64];
    int ID_messageCount;
    int arrayNum = 0;

    if (protocol == "ISO9141")
    {
        writeData(vehicle_info_SLOW, sizeof(vehicle_info_SLOW), read_ID_Length);
    }
    else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
    {
        writeData(vehicle_info, sizeof(vehicle_info), read_ID_Length);
    }
    delay(200);
    readData();
    ID_messageCount = resultBuffer[11];

    if (protocol == "ISO9141")
    {
        writeData(vehicle_info_SLOW, sizeof(vehicle_info_SLOW), read_ID);
    }
    else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
    {
        writeData(vehicle_info, sizeof(vehicle_info), read_ID);
    }
    delay(200);
    readData();

    if (resultBuffer[11] == 0x01)
    {
        for (int j = 0; j < ID_messageCount; j++)
        {
            for (int i = 1; i <= 4; i++)
            {
                ID_Array[arrayNum++] = resultBuffer[i + 11 + j * 11];
            }
        }
    }
    Vehicle_ID = convertHexToAscii(ID_Array, arrayNum);
}

void getCalibrationIDNum()
{
    // Request: C2 33 F1 09 06 F5
    // example Response: 87 F1 11 49 06 01 00 00 67 0C 4C

    byte IDNum_Array[16];
    int ID_messageCount;
    int arrayNum = 0;

    if (protocol == "ISO9141")
    {
        writeData(vehicle_info_SLOW, sizeof(vehicle_info_SLOW), read_ID_Num_Length);
    }
    else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
    {
        writeData(vehicle_info, sizeof(vehicle_info), read_ID_Num_Length);
    }
    delay(200);
    readData();
    ID_messageCount = resultBuffer[11];

    if (protocol == "ISO9141")
    {
        writeData(vehicle_info_SLOW, sizeof(vehicle_info_SLOW), read_ID_Num);
    }
    else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
    {
        writeData(vehicle_info, sizeof(vehicle_info), read_ID_Num);
    }
    delay(200);
    readData();

    if (resultBuffer[11] == 0x01)
    {
        for (int j = 0; j < ID_messageCount; j++)
        {
            for (int i = 1; i <= 4; i++)
            {
                IDNum_Array[arrayNum++] = resultBuffer[i + 11 + j * 11];
            }
        }
    }
    Vehicle_ID_Num = convertBytesToHexString(IDNum_Array, arrayNum);
}

void getSupportedPIDs(const byte option)
{
    int pidIndex = 0;
    int supportedCount = 0;

    if (option == 0x01)
    {
        if (protocol == "ISO9141")
        {
            writeData(live_data_SLOW, sizeof(live_data_SLOW), SUPPORTED_PIDS_1_20);
        }
        else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
        {
            writeData(live_data, sizeof(live_data), SUPPORTED_PIDS_1_20);
        }
        readData();

        for (int i = 11; i < 15; i++)
        {
            byte value = resultBuffer[i];
            for (int bit = 7; bit >= 0; bit--)
            {
                if ((value >> bit) & 1)
                {
                    String pidString = String(pidIndex + 1, HEX);
                    pidString.toUpperCase();

                    if (pidString.length() == 1)
                    {
                        pidString = "0" + pidString;
                    }
                    supportedLiveData[supportedCount++] = pidString;
                }
                pidIndex++;
            }
        }

        if (isInArray(supportedLiveData, sizeof(supportedLiveData), "20"))
        {
            if (protocol == "ISO9141")
            {
                writeData(live_data_SLOW, sizeof(live_data_SLOW), SUPPORTED_PIDS_21_40);
            }
            else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
            {
                writeData(live_data, sizeof(live_data), SUPPORTED_PIDS_21_40);
            }
            readData();

            for (int i = 11; i < 15; i++)
            {
                byte value = resultBuffer[i];
                for (int bit = 7; bit >= 0; bit--)
                {
                    if ((value >> bit) & 1)
                    {
                        String pidString = String(pidIndex + 1, HEX);
                        pidString.toUpperCase();

                        if (pidString.length() == 1)
                        {
                            pidString = "0" + pidString;
                        }
                        supportedLiveData[supportedCount++] = pidString;
                    }
                    pidIndex++;
                }
            }
        }
    }
    if (option == 0x02)
    {
        if (protocol == "ISO9141")
        {
            writeDataFreezeFrame(freeze_frame_SLOW, sizeof(freeze_frame_SLOW), 0x00);
        }
        else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
        {
            writeDataFreezeFrame(freeze_frame, sizeof(freeze_frame), 0x00);
        }
        readData();

        for (int i = 13; i < 17; i++)
        {
            byte value = resultBuffer[i];
            for (int bit = 7; bit >= 0; bit--)
            {
                if ((value >> bit) & 1)
                {
                    String pidString = String(pidIndex + 1, HEX);
                    pidString.toUpperCase();

                    if (pidString.length() == 1)
                    {
                        pidString = "0" + pidString;
                    }
                    supportedFreezeFrame[supportedCount++] = pidString;
                }
                pidIndex++;
            }
        }
    }
    if (option == 0x09)
    {
        if (protocol == "ISO9141")
        {
            writeData(vehicle_info_SLOW, sizeof(vehicle_info_SLOW), 0x00);
        }
        else if (protocol == "ISO14230_Fast" || true || protocol == "ISO14230_Slow")
        {
            writeData(vehicle_info, sizeof(vehicle_info), 0x00);
        }
        readData();

        for (int i = 12; i < 16; i++)
        {
            byte value = resultBuffer[i];
            for (int bit = 7; bit >= 0; bit--)
            {
                if ((value >> bit) & 1)
                {
                    String pidString = String(pidIndex + 1, HEX);
                    pidString.toUpperCase();

                    if (pidString.length() == 1)
                    {
                        pidString = "0" + pidString;
                    }
                    supportedVehicleInfo[supportedCount++] = pidString;
                }
                pidIndex++;
            }
        }
    }
}

byte calculateChecksum(const byte data[], int length) {
  byte checksum = 0;
  for (int i = 0; i < length; i++) {
    checksum += data[i];
  }
  return checksum % 256;
}

bool isInArray(String array[], int arrayLength, String searchString) {
  for (int i = 0; i < arrayLength; i++) {
    if (array[i] == searchString) {
      return true;
    }
  }
  return false;
}

// int getArrayLength(byte arr[]) {
//   int count = 0;
//   while (arr[count] != 0) {
//     count++;
//   }
//   return count;
// }

String convertHexToAscii(byte* hexBytes, size_t length) {
  String asciiString = "";
  for (int i = 0; i < length; i++) {
    if (hexBytes[i] >= 0x20 && hexBytes[i] <= 0x7E) {
      char asciiChar = (char)hexBytes[i];
      asciiString += asciiChar;
    }
  }
  return asciiString;
}

String convertBytesToHexString(byte* buffer, int length) {
  String hexString = "";
  for (int i = 0; i < length; i++) {
    if (buffer[i] < 0x10) {
      hexString += "0";
    }
    hexString += String(buffer[i], HEX);
  }
  hexString.toUpperCase();
  return hexString;
}